// Mocks generated by Mockito 5.2.0 from annotations
// in simple_money_tracker/test/utils.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_money_tracker/exports.dart' as _i2;
import 'package:simple_money_tracker/src/core/core.dart' as _i5;
import 'package:simple_money_tracker/src/data/models/account_model.dart' as _i8;
import 'package:simple_money_tracker/src/data/models/category_model.dart'
    as _i13;
import 'package:simple_money_tracker/src/data/models/currency_model.dart'
    as _i10;
import 'package:simple_money_tracker/src/data/models/tran_model.dart' as _i6;
import 'package:simple_money_tracker/src/data/repositories/i_account_repo.dart'
    as _i7;
import 'package:simple_money_tracker/src/data/repositories/i_auth_repo.dart'
    as _i11;
import 'package:simple_money_tracker/src/data/repositories/i_category_repo.dart'
    as _i12;
import 'package:simple_money_tracker/src/data/repositories/i_currency_repo.dart'
    as _i9;
import 'package:simple_money_tracker/src/data/repositories/i_tran_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ITranRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockITranRepo extends _i1.Mock implements _i3.ITranRepo {
  MockITranRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TranModel>> create(
          _i6.TranModel? model) =>
      (super.noSuchMethod(Invocation.method(#create, [model]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.TranModel>>.value(
                  _FakeEither_0<_i5.Failure, _i6.TranModel>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.TranModel>>);
  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i2.IList<_i6.TranModel>>> streamByDate(
          {DateTime? startedDate, DateTime? endedDate}) =>
      (super.noSuchMethod(
              Invocation.method(#streamByDate, [],
                  {#startedDate: startedDate, #endedDate: endedDate}),
              returnValue: Stream<
                  _i2.Either<_i5.Failure, _i2.IList<_i6.TranModel>>>.empty())
          as _i4.Stream<_i2.Either<_i5.Failure, _i2.IList<_i6.TranModel>>>);
}

/// A class which mocks [IAccountRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAccountRepo extends _i1.Mock implements _i7.IAccountRepo {
  MockIAccountRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i8.AccountModel>> watchOne() =>
      (super.noSuchMethod(Invocation.method(#watchOne, []),
              returnValue:
                  Stream<_i2.Either<_i5.Failure, _i8.AccountModel>>.empty())
          as _i4.Stream<_i2.Either<_i5.Failure, _i8.AccountModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.AccountModel>> create(
          _i8.AccountModel? data) =>
      (super.noSuchMethod(Invocation.method(#create, [data]),
          returnValue: Future<_i2.Either<_i5.Failure, _i8.AccountModel>>.value(
              _FakeEither_0<_i5.Failure, _i8.AccountModel>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i8.AccountModel>>);
}

/// A class which mocks [ICurrencyRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockICurrencyRepo extends _i1.Mock implements _i9.ICurrencyRepo {
  MockICurrencyRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i2.IList<_i10.CurrencyModel>>>
      streamAll() => (super.noSuchMethod(Invocation.method(#streamAll, []),
          returnValue: Stream<
              _i2.Either<_i5.Failure,
                  _i2.IList<_i10.CurrencyModel>>>.empty()) as _i4
          .Stream<_i2.Either<_i5.Failure, _i2.IList<_i10.CurrencyModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.CurrencyModel>> create(
          _i10.CurrencyModel? data) =>
      (super.noSuchMethod(Invocation.method(#create, [data]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i10.CurrencyModel>>.value(
                      _FakeEither_0<_i5.Failure, _i10.CurrencyModel>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i10.CurrencyModel>>);
}

/// A class which mocks [IAuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepo extends _i1.Mock implements _i11.IAuthRepo {
  MockIAuthRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<String?> watchUserIdStateChanged() =>
      (super.noSuchMethod(Invocation.method(#watchUserIdStateChanged, []),
          returnValue: Stream<String?>.empty()) as _i4.Stream<String?>);
}

/// A class which mocks [ICategoryRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockICategoryRepo extends _i1.Mock implements _i12.ICategoryRepo {
  MockICategoryRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i2.IList<_i13.CategoryModel>>>
      streamAll() => (super.noSuchMethod(Invocation.method(#streamAll, []),
          returnValue: Stream<
              _i2.Either<_i5.Failure,
                  _i2.IList<_i13.CategoryModel>>>.empty()) as _i4
          .Stream<_i2.Either<_i5.Failure, _i2.IList<_i13.CategoryModel>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i13.CategoryModel>> create(
          _i13.CategoryModel? model) =>
      (super.noSuchMethod(Invocation.method(#create, [model]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i13.CategoryModel>>.value(
                      _FakeEither_0<_i5.Failure, _i13.CategoryModel>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i13.CategoryModel>>);
}
